[{"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/App.tsx":"1","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/header.tsx":"2","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/util.tsx":"3","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/board.tsx":"4","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/robot.tsx":"5","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/hand.tsx":"6","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/login.tsx":"7","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/index.js":"8","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/hands_input.tsx":"9","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/recoil_states.tsx":"10","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/subrank.tsx":"11","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/room.tsx":"12","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/FadeinBox.tsx":"13","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/sample.tsx":"14","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/submission.tsx":"15","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/boardplayer.tsx":"16","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/useful.tsx":"17","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/arena.tsx":"18","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/BigMsg.tsx":"19"},{"size":1302,"mtime":1611476100663,"results":"20","hashOfConfig":"21"},{"size":3189,"mtime":1609785349899,"results":"22","hashOfConfig":"21"},{"size":4444,"mtime":1611337381966,"results":"23","hashOfConfig":"21"},{"size":3107,"mtime":1611420464163,"results":"24","hashOfConfig":"21"},{"size":1014,"mtime":1611910727228,"results":"25","hashOfConfig":"21"},{"size":254,"mtime":1607685692010,"results":"26","hashOfConfig":"21"},{"size":2595,"mtime":1608995054628,"results":"27","hashOfConfig":"21"},{"size":218,"mtime":1606986828234,"results":"28","hashOfConfig":"21"},{"size":8979,"mtime":1611584998451,"results":"29","hashOfConfig":"21"},{"size":413,"mtime":1609055920023,"results":"30","hashOfConfig":"21"},{"size":3280,"mtime":1611598358511,"results":"31","hashOfConfig":"21"},{"size":145,"mtime":1609747126311,"results":"32","hashOfConfig":"21"},{"size":482,"mtime":1610994684555,"results":"33","hashOfConfig":"21"},{"size":13529,"mtime":1611420544352,"results":"34","hashOfConfig":"21"},{"size":3653,"mtime":1611598962154,"results":"35","hashOfConfig":"21"},{"size":2177,"mtime":1611825836646,"results":"36","hashOfConfig":"21"},{"size":1413,"mtime":1611910724748,"results":"37","hashOfConfig":"21"},{"size":12294,"mtime":1613203870625,"results":"38","hashOfConfig":"21"},{"size":1989,"mtime":1613203779000,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},"1xelvjt",{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"47"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"47"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"43"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"65"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"47"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"47"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"47"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/App.tsx",["96","97"],"import Arena from \"./arena/arena\"\nimport Header from \"./header\"\nimport styled from \"styled-components\"\nimport Login from \"./login\"\nimport { RecoilRoot, useRecoilState, useSetRecoilState } from \"recoil\"\nimport woodImg from \"./img/wood.jpg\"\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport RoomList from \"./room\"\nimport { fetchMe, userState } from \"./recoil_states\"\nimport { useEffect } from \"react\"\n\nconst TestBox = styled(\"div\")`\n  position:relative;\n  height:calc(100% - 6ex);\n`\n\nconst RootDiv = styled.div`\n  width:100%;\n  height:100%;\n  overflow:hidden;\n  background-image:url(${woodImg});\n  background-repeat:repeat;\n`\n\nfunction App() {\n  return (\n    <RootDiv>\n      <RecoilRoot>\n          <InnerApp />\n      </RecoilRoot>\n    </RootDiv>\n  );\n}\n\nfunction InnerApp() {\n  const setUser = useSetRecoilState(userState)\n\n  useEffect(() => {\n    fetchMe(setUser)\n  }, [setUser]);\n\n  return (\n    <Router>\n      <div style={{ position: \"relative\", height: \"6ex\" }}>\n        <Header />\n      </div>\n      <TestBox>\n        <Switch>\n          <Route exact path=\"/\">\n            <Arena />\n          </Route>\n          <Route exact path=\"/roomlist\">\n            <RoomList />\n          </Route>\n        </Switch>\n      </TestBox>\n        </Router>\n  )\n}\n\nexport default App;\n",["98","99"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/header.tsx",["100"],"import react, { useState } from \"react\"\nimport { useRecoilState } from \"recoil\"\nimport styled from \"styled-components\"\nimport {fetchMe, userState} from \"./recoil_states\"\nimport { API_SERVER } from \"./util\"\nimport {useHistory} from \"react-router-dom\"\nimport { CircularProgress } from \"@material-ui/core\"\ninterface Props {\n\n}\n\nconst HeaderBox = styled(\"div\")`\n    width:100%;\n    height:100%;\n    position:relative;\n    background-color:rgba(255,255,255,0.48);\n    box-shadow:0px 0px 5px black;\n    color:saddlebrown;\n    display:flex;\n`\n\nconst HeaderContent = styled(\"div\")`\n    /* height:100%; */\n    width:fit-content;\n    font-size:x-large;\n    text-align:center;\n    font-weight:bold;\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    padding-left: 0.25em;\n    padding-right: 0.25em;\n    margin-left: 0.25em;\n    margin-right: 0.25em;\n    box-sizing: border-box;\n`\n\nconst HeaderButton = styled(HeaderContent)`\n    /* background-color:rgba(0,0,0,0.15); */\n    /* margin-left:0.5em; */\n    border: outset 3px #8040129e;\n    border-radius: 7px;\n    margin-top:2.5px;\n    margin-bottom:2.5px;\n    \n    &:hover {\n        /* line-height:103%; */\n        border: inset 3px #8040129e;\n        cursor:pointer;\n    }\n`\n\n\nconst RightBox = styled(\"div\") `\n    display:flex;\n`\n\nconst LeftBox = styled(\"div\") `\n    margin-left: auto;\n    margin-right: 1vw;\n    display:flex;\n`\n\nexport default function Header(props : Props) {\n    const [loading, setLoading] = useState(false)\n    const [user, setUser] = useRecoilState(userState)\n\n    const loginreq = () => {\n        setLoading(true)\n        fetch(API_SERVER+\"/twitter/signin\", {mode:\"same-origin\"})\n            .then((res) => res.json() )\n            .then((data) => {\n                console.log(data)\n                const w = window.open(data[\"url\"],\"twitter-login\", 'width=300,height=300')\n                if(w){\n                    w.focus()\n                    var timer = setInterval(function() { \n                        if(w.closed) {\n                            clearInterval(timer);\n                            fetchMe(setUser)\n                            setLoading(false)\n                        }\n                    }, 1000);\n                }\n            })\n            .catch((err) => console.error(err));\n            }\n\n    const logoutreq = () => {\n        fetch(API_SERVER+\"/signout\", {mode:\"same-origin\"})\n        .then(()=>setUser(null))\n        .catch((err) => console.error(err));\n    }\n\n    let history = useHistory();\n    return (\n        <HeaderBox> \n            <RightBox>\n            <HeaderButton onClick={()=>{history.push(\"/\")}}>Arena</HeaderButton>\n            <HeaderButton onClick={()=>{history.push(\"/roomlist\")}}>Rooms</HeaderButton>\n            </RightBox>\n            <LeftBox>\n            {user!==null && <HeaderContent>{user.name}</HeaderContent> }\n            {user!==null && <HeaderButton onClick={logoutreq}>LOGOUT</HeaderButton> }\n            {user!==null || (loading ? <HeaderContent><CircularProgress color=\"inherit\"/></HeaderContent> :\n                <HeaderButton onClick={loginreq}>LOGIN</HeaderButton> )\n            }\n            </LeftBox>\n        </HeaderBox>\n    )\n}",["101","102"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/util.tsx",["103","104"],"import { useEffect, useState } from \"react\"\nimport { BoardModel } from \"./game/board\"\nimport { Game } from \"./game/game\"\nimport { Dir, Hand, UP, LT, RT, DN } from \"./game/hand\"\nimport blackRobotImg from \"./img/robot/black.png\"\nimport blueRobotImg from \"./img/robot/blue.png\"\nimport greenRobotImg from \"./img/robot/green.png\"\nimport redRobotImg from \"./img/robot/red.png\"\nimport yellowRobotImg from \"./img/robot/yellow.png\"\nimport { SubmissionModel } from \"./shared/submission\"\nimport User from \"./shared/user\"\n\nexport const API_SERVER = \"api\"\n\nexport const Red = \"red\"\nexport const Black = \"black\"\nexport const Blue = \"blue\"\nexport const Green = \"green\"\nexport const Yellow = \"yellow\"\n\nconst colors = [Blue, Red, Green, Yellow, Black] as const\nexport type Color = typeof colors[number]\n\nexport interface Pos {\n    x:number\n    y:number\n}\n\nexport function robotColor(idx : number) : Color {\n    return colors[idx]\n}\n\nexport function getRandomInt(min:number, max:number) {\n\tmin = Math.ceil(min);\n\tmax = Math.floor(max);\n\treturn Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive\n}\n\nexport function robotImg(color : Color){\n    switch(color) {\n        case Black: return blackRobotImg\n        case Blue: return blueRobotImg\n        case Green: return greenRobotImg\n        case Red: return redRobotImg\n        case Yellow: return yellowRobotImg\n    } \n}\n\nfunction dirIdx(dir: Dir) : number {\n\tswitch (dir) {\n\tcase UP:\n\t\treturn 0\n\tcase RT:\n\t\treturn 1\n\tcase DN:\n\t\treturn 2\n\tcase LT:\n\t\treturn 3\n\t}\n\treturn 0\n}\n\nfunction dirVec(dir : Dir) : Pos {\n\tswitch (dir) {\n\tcase UP:\n\t\treturn {x: 0, y: -1}\n\tcase RT:\n\t\treturn {x: 1, y: 0}\n\tcase DN:\n\t\treturn {x: 0, y: 1}\n\tcase LT:\n\t\treturn {x: -1, y: 0}\n\t}\n\n\t// log.Fatal(\"invalid dir \" + dir)\n\treturn {x: 0, y: -1}\n}\n\nexport function addPos(p :Pos, v :Pos) :Pos {\n\treturn {x: v.x + p.x, y: v.y + p.y}\n}\nexport function eqPos(a : Pos, b : Pos) : boolean {\n    return a.x === b.x && a.y === b.y\n}\n\nfunction canGo(board : BoardModel, poss : Pos[], robot : number, dir : Dir) : boolean {\n\tconst nex = addPos(poss[robot], dirVec(dir))\n\tif (nex.x >= board.width || nex.y >= board.height || nex.x < 0 || nex.y < 0) {\n\t\treturn false\n    }\n    for(var i = 0; poss.length > i; i++ ){\n        const pos = poss[i]\n\t\tif (eqPos(pos, nex)) {\n\t\t\treturn false\n\t\t}\n    }\n\treturn !board.cells[poss[robot].y][poss[robot].x].walls[dirIdx(dir)]\n}\n\nexport function go(board:BoardModel, poss:Pos[], hand:Hand) : Pos[] {\n\tconst ret = poss.slice()\n\tconst vec = dirVec(hand.dir)\n\twhile(canGo(board, ret, hand.robot, hand.dir)) {\n\t\tvar nex = addPos(ret[hand.robot], vec)\n\t\tret[hand.robot] = nex\n\t}\n\treturn ret\n}\n\nexport function simulate(board:BoardModel, hands : Hand[]) : Pos[][] {\n\tvar curPos = board.poss.slice()\n\tvar history:Pos[][] = [curPos.slice()]\n\n    hands.forEach((hand) => {\n\t\tcurPos = go(board, curPos, hand)\n\t\thistory.push(curPos)\n    })\n\n    return history\n}\n\nexport async function fetchMeAPI() : Promise<User> {\n    var u = fetch(API_SERVER + \"/me\")\n    .then((res) => {\n\t\tif(!res.ok){\n\t\t  throw new Error(res.statusText);\n\t\t}\n\t\treturn res.json()\n\t})\n    .then((data) => data as User)\n    .catch((err) => {throw err});\n    return await u\n}\n\nexport function compSub(a:SubmissionModel,b:SubmissionModel):number{\n    if(a.hands.length === b.hands.length){\n        return a.date > b.date ? 1 : -1\n    }\n    return a.hands.length > b.hands.length ? 1 : -1\n}\n\nexport function useKeyPress(targets : string[]) {\n\t// State for keeping track of whether key is pressed\n\tconst [pressed, setPressed] = useState<Set<string>>(new Set<string>())\n  \n\t// If pressed key is our target key then set to true\n\tfunction downHandler({key}:{key:string}) {\n\t\t// console.log(key)\n\t\tif(targets.includes(key)){\n\t\t\tvar np = new Set(pressed)\n\t\t\tnp.add(key)\n\t\t\tsetPressed(np)\n\t\t}\n\t}\n  \n\t// If released key is our target key then set to false\n\tconst upHandler = ({ key }:{key:string}) => {\n\t\tif(targets.includes(key)){\n\t\tvar np = new Set(pressed)\n\t\tnp.delete(key)\n\t\tsetPressed(np)\n\t\t}\n\t};\n  \n\t// Add event listeners\n\tuseEffect(() => {\n\t  window.addEventListener('keydown', downHandler);\n\t  window.addEventListener('keyup', upHandler);\n\t  // Remove event listeners on cleanup\n\t  return () => {\n\t\twindow.removeEventListener('keydown', downHandler);\n\t\twindow.removeEventListener('keyup', upHandler);\n\t  };\n\t}, []); // Empty array ensures that effect is only run on mount and unmount\n  \n\treturn pressed;\n  }",["105","106"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/board.tsx",["107","108","109","110","111"],"import React, {useEffect, useState} from 'react';\nimport wallImg from \"../img/wall.png\"\nimport groundImg from \"../img/ground.png\"\nimport centerImg from \"../img/center.png\"\nimport goalImg from \"../img/goal.png\"\nimport styled from \"styled-components\"\n\nimport Robot, {RobotModel} from \"./robot\"\nimport {Color, Pos} from \"../util\"\nimport { cast, Castable } from '@bitr/castable';\n\n\nclass CellModel {\n    walls : [boolean, boolean, boolean, boolean]\n    mirror? : '/' | '\\\\'\n    // mark: Color | undefined\n    goal: boolean\n    constructor (){\n        this.walls = [false,false,false,false]\n        this.goal = false\n    }\n}\n\nexport interface BoardModel {\n    height:number\n    width: number\n    cells: CellModel[][]\n    main_robot: number\n    poss: Pos[]\n}\n\n\nconst CellObj = styled(\"img\")<{deg?:number}>`\n    alt:W;\n    transform:rotate(${props => props.deg?props.deg:0}deg);\n    display:relative;\n    z-index:20;\n    margin-top:-100%;\n    height:100%;\n    width:auto;\n`\nfunction Cell(props: {cell:CellModel}){\n    const {cell} = props\n    return (\n        <div style={{width:\"auto\", height:\"100%\"}}>\n            <img src={groundImg} alt=\"ground\" height=\"100%\" width=\"auto\"/>\n            {cell.walls[0] && cell.walls[1] && cell.walls[2] && cell.walls[3] && \n                <CellObj src={centerImg}/>\n            }\n            {cell.walls[0] && <CellObj deg={0} src={wallImg}/>}\n            {cell.walls[1] && <CellObj deg={90} src={wallImg}/>}\n            {cell.walls[2] && <CellObj deg={180} src={wallImg}/>}\n            {cell.walls[3] && <CellObj deg={270} src={wallImg}/>}\n            {cell.goal && <CellObj deg={0} src={goalImg}/>}\n        </div>\n    )\n}\n\nconst Row = styled(\"div\")<{h:number}>`\n    font-size:0px;\n    width:100%;\n    height:calc(100%/${props=>props.h});\n    display:flex;\n    flex-wrap:no-wrap;\n`\nconst Grid = styled(\"div\")<{cellSize: number, w: number, h:number}>`\n    width:${props=>props.cellSize*props.w}px;\n    height:${props=>props.cellSize*props.h}px;\n`\n\nexport interface BoardProps{\n    board : BoardModel\n    cellSize: number\n    robots : RobotModel[]\n    mainRobot: number\n    onTransitionEnd?: ()=>void\n}\n\nexport default function Board(props : BoardProps) {\n    const {board, cellSize, robots, mainRobot, onTransitionEnd} = props\n    \n    // useEffect(()=>{\n    //     console.log(board)\n    // },[board])\n\n    return (\n        <Grid cellSize={cellSize} w={board.width} h={board.height}>\n            {board.cells.map((row,idx) => {\n                return <Row h={board.height} key={\"row\"+idx.toString()}>\n                {row.map((cell,idx2) => {\n                    return <Cell cell={cell} key={\"cell\"+idx2.toString()}/>\n                })}\n                </Row>\n            })}\n            {\n                robots.map((robot,idx) => \n                    <Robot onTransitionEnd={onTransitionEnd} robot={robot} cellSize={cellSize} key={\"robot\"+idx.toString()}/>\n                )\n            }\n            <Robot robot={{idx:mainRobot, pos:{x:board.width/2-0.5, y:board.height/2-0.5}}}  cellSize={cellSize}/>\n        </Grid>\n    );\n}\n\nBoard.defaultProps = {\n    robots : []\n}\n","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/robot.tsx",["112","113"],"\nimport { DetailedHTMLProps } from \"react\";\nimport styled from \"styled-components\"\nimport {Color, Pos, robotColor, robotImg} from \"../util\"\n\nexport interface RobotModel{\n    pos : Pos\n    glow?: boolean\n    idx : number\n}\n\nexport function makeRobots(poss:Pos[]):RobotModel[]{\n    return poss.map((pos, idx) => ({pos:pos, idx:idx} as RobotModel))\n}\n\n\nconst RobotImg = styled(\"img\")<{cellSize:number, x:number, y:number}>`\n     position:absolute;\n     transition: transform 0.2s linear;\n     width:${p=>p.cellSize}px;\n     height:${p=>p.cellSize}px;\n     top:0px;\n     left:0px;  \n     transform:translate(${p=>p.x}%,${p=>p.y}%);\n`\ninterface Props {\n    robot:RobotModel,\n    cellSize : number,\n    onTransitionEnd?: ()=>void\n}\n\nexport default function Robot(props : Props){\n    const {robot, cellSize, onTransitionEnd} = props\n    const pos = robot.pos;\n    return (\n        <RobotImg onTransitionEnd={onTransitionEnd} cellSize={cellSize} x={pos.x*100} y={pos.y*100} src={robotImg(robotColor(robot.idx))}/>\n    )\n}\n","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/hand.tsx",["114"],"import {Color} from \"../util\"\n\n//Dir 方向　上下左右\nexport type Dir = string\n\nexport const UP: Dir = \"up\"\nexport const RT: Dir = \"rt\"\nexport const DN: Dir = \"dn\"\nexport const LT: Dir = \"lt\"\n\nexport interface Hand {\n\trobot: number\n    dir :  Dir\n}\n","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/login.tsx",["115","116"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/index.js",[],["117","118"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/hands_input.tsx",["119","120","121","122","123","124","125","126","127","128","129"],"import React, { useRef } from \"react\"\nimport { Dir, UP, RT, DN, LT, Hand } from \"../game/hand\"\nimport { useEffect, useState } from \"react\"\nimport { robotColor, robotImg, useKeyPress } from \"../util\"\nimport styled, {css, keyframes} from \"styled-components\"\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\"\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\"\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport SvgIcon from \"@material-ui/icons/ArrowBack\"\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport SendIcon from '@material-ui/icons/Send';\n\nimport { Scrollbars } from 'react-custom-scrollbars';\nimport { CircularProgress } from \"@material-ui/core\"\nimport { FitSvgIcon } from \"./useful\"\n\nfunction parseHands(str: string): Hand[] {\n    var ret: Hand[] = []\n    if (ret.length % 2 !== 0) throw new Error(\"invalid format\")\n\n    for (var i = 0; i < str.length; i += 2) {\n        var robot: number\n        var dir: Dir\n\n        robot = parseInt(str[i])\n        switch (str[i + 1]) {\n            case \"u\": dir = UP; break;\n            case \"r\": dir = RT; break;\n            case \"d\": dir = DN; break;\n            case \"l\": dir = LT; break;\n            default: throw new Error(\"invalid direction\")\n        }\n        ret.push({ robot: robot, dir: dir })\n    }\n\n    return ret\n}\n\nconst DirText = styled(\"div\")`\n    color:white;\n    font-weight:bold;\n    font-size:xx-large;\n`\n\nconst slide = keyframes`\n    0%{\n        transform:translateY(-100%);\n    }\n    100%{\n        transform:translateY(0);\n    }\n`  \nconst ResBox = styled('div')`\n    box-sizing:border-box;\n    width:100%;\n    /* padding: 12px 12px 12px 5px; */\n    /* margin: 12px 12px 12px 0px; */\n    font-weight: bold;\n    /* border: inset 4px #a4c7cc;*/\n    border-radius:7px;\n    background-color: \"floralwhite\"; \n    color: black;\n    text-shadow: 0 0 1px black;\n    box-shadow: 1px 1px 4px #8c6d55;\n    -webkit-text-decoration: none;\n    text-decoration: none;\n    /* display:grid;\n    grid-template-rows: 60% 40%;\n    grid-template-columns: 20% 40% 40%; */\n    overflow:hidden;\n`\n\nfunction toArrow(dir: Dir) {\n    switch (dir) {\n        case UP:\n            return ArrowUpwardIcon\n        case RT:\n            return ArrowForwardIcon\n        case DN:\n            return ArrowDownwardIcon\n        case LT:\n            return ArrowBackIcon\n        default:\n            return ArrowUpwardIcon\n    }\n}\n\n\nconst HandBoxi = styled(\"div\")`\n    text-align:center;\n    display:grid;\n    grid-template-columns:1em calc(( 100% - 1em ) / 2) calc(( 100% - 1em ) / 2);\n\n    box-sizing:border-box;\n    /* width:100%; */\n    font-weight: bold;\n    border-radius:7px;\n    background-color: floralwhite; \n    color: black;\n    text-shadow: 0 0 1px black;\n    box-shadow: 1px 1px 4px #8c6d55;\n    margin:2px 2px 2px 2px;\n    text-decoration: none;\n    overflow:hidden;\n    z-index:-1;\n    /* animation:${slide} 1s ease-in-out;\n    transition:all 0.5s;  */\n`\n\nfunction HandBox(props: { hand: Hand , r: number}) {\n    const { hand, r } = props;\n\n    return (\n        <HandBoxi>\n            {r}\n            <img style={{ objectFit: \"cover\", maxWidth:\"4em\", marginRight:\"auto\", marginLeft:\"auto\",  width: \"100%\", height: \"100%\", alignSelf: \"center\" }} src={robotImg(robotColor(hand.robot))} />\n            <div style={{ display: \"flex\", maxWidth:\"4em\", marginRight:\"auto\", marginLeft:\"auto\", flexDirection: \"column\", justifyContent: \"center\" }}>\n                <FitSvgIcon fontSize=\"inherit\" style={{ alignSelf: \"center\" }} component={toArrow(hand.dir)} />\n            </div>\n        </HandBoxi>\n    )\n}\n\nconst ScrollBox = styled(Scrollbars)`\n    /* border: solid saddlebrown; */\n    height:100%;\n    /* border-radius: 10px; */\n        position:relative;\n        box-shadow: 0px 0px 10px 0px saddlebrown inset;\n    /* &::before{\n        position:relative;\n        height:100%;\n        width:100%;\n        background-color: rgba(0,0,0,0.05);\n        box-shadow: 0px 0px 10px 0px saddlebrown inset;\n        content:\"aaa\";\n        z-index:100;\n    } */\n`\n\nconst InnerBox = styled(\"div\")`\n    background-color: rgba(0,0,0,0.05);\n    position:relative;\n    min-height:100vh;\n    padding:0.5em 0.5em 1em 0.5em;\n/* box-shadow: 0px 0px 10px 0px saddlebrown inset; */\n    /* border-radius: 10px; */\n    justify-content:flex-end;\n    display:flex; \n    flex-direction:column-reverse; \n    z-index:-2;\n`\n\nfunction HandsBox(props: { hands: Hand[] }) {\n    const { hands } = props;\n    const ref = useRef<Scrollbars>(null)\n    useEffect(()=>{\n        if(ref.current === null) return;\n        ref.current.scrollTop(0)\n    }, [hands])\n\n    return (\n        <ScrollBox autoHide={true} ref={ref}>\n            <InnerBox>\n            {hands.map((hand, idx) => <HandBox hand={hand} key={\"hand\" + idx.toString()} r={idx}/>)}\n            </InnerBox>\n        </ScrollBox>\n    )\n}\n\nconst HandsInputRoot = styled(\"div\")`\n    display:grid;\n    width:100%; \n    height:100%;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto 1fr;\n`\n\nconst WoodButton = styled(\"button\")`\n    /* background-color:rgba(0,0,0,0.15); */\n    /* margin-left:0.5em; */\n    border: outset 5px #8040129e;\n    border-radius: 7px;\n    margin-top:2.5px;\n    margin-bottom:2.5px;\n    width:100%;\n    height:calc(100% - 5px);\n    box-sizing:border-box;\n\n    justify-content: center;\n    font-weight: bolder;\n    text-align: center;\n    align-items:center;\n    flex-direction: column;\n    display: flex;\n    font-size: xxx-large;\n    color: saddlebrown;\n\n    background-color:rgba(255,255,255,0.2);\n    \n    &:hover {\n        background-color:rgba(0,0,0,0);\n        border: inset 5px #8040129e;\n        cursor:pointer;\n    }\n    &:disabled{\n        background-color:rgba(255,255,255,0.2);\n        border: outset 5px #8040129e;\n        opacity: 0.5;\n        cursor: default;\n    }\n`\n\ninterface Props {\n    addHand: (hands: Hand) => void\n    rmHand: () => void\n    clearHands: () => void\n    onSubmit: () => void\n    disabled: boolean\n    sending: boolean\n    hands: Hand[]\n}\n\nexport default function HandsInput(props: Props) {\n    const {hands, addHand, rmHand, clearHands, onSubmit, disabled, sending} = props\n\n    const robotPressed = useKeyPress([\"1\", \"2\", \"3\", \"4\", \"0\"])\n    const arrowPressed = useKeyPress([\"ArrowUp\", \"ArrowRight\", \"ArrowLeft\", \"ArrowDown\"])\n    const [sRobot, setsRobot] = useState<number | null>(null)\n\n    useEffect(() => {\n        var bef = Date.now()\n        const bsHandler = ({ key }: { key: string }) => {\n            if (key == \"Backspace\") {\n                var time = Date.now()\n                \n                if(bef + 100 < time){\n                    rmHand()\n                    bef = time\n                }\n            }\n            if(key == \"Enter\") {\n                onSubmit()\n            }\n            if(key == \"r\"){\n                clearHands()\n            }\n        }\n        window.addEventListener('keydown', bsHandler);\n        return () => {\n            window.removeEventListener('keydown', bsHandler);\n        };\n    }, [hands]);\n\n    useEffect(() => {\n        if (robotPressed.has(\"0\")) setsRobot(0)\n        else if (robotPressed.has(\"1\")) setsRobot(1)\n        else if (robotPressed.has(\"2\")) setsRobot(2)\n        else if (robotPressed.has(\"3\")) setsRobot(3)\n        else if (robotPressed.has(\"4\")) setsRobot(4)\n        else setsRobot(null)\n    }, [robotPressed])\n\n    const pressArrow = (dir: Dir) => {\n        if (sRobot == null) return;\n        try {\n            addHand({ robot: sRobot, dir: dir })\n        } catch (e: any) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (arrowPressed.has(\"ArrowUp\")) pressArrow(UP)\n        else if (arrowPressed.has(\"ArrowRight\")) pressArrow(RT)\n        else if (arrowPressed.has(\"ArrowDown\")) pressArrow(DN)\n        else if (arrowPressed.has(\"ArrowLeft\")) pressArrow(LT)\n    }, [arrowPressed])\n\n    const handleSubmit = () => {\n        onSubmit()\n        // setHands([])\n    }\n\n    return (\n        <HandsInputRoot>\n            {/* <div > */}\n            <div style={{ gridColumnStart: \"1\", gridColumnEnd: \"2\", width:\"100%\", height:\"100%\" }} >\n                <WoodButton disabled={disabled} onClick={handleSubmit} id=\"SendButton\">\n                    {sending ?  <CircularProgress color=\"inherit\"/> : <SendIcon fontSize=\"inherit\"/>}\n                </WoodButton>\n            </div>\n            <div style={{ gridColumnStart: \"2\", gridColumnEnd: \"3\" }} >\n                {/* <HandBoxi>\n                    {sRobot !== null && <img style={{ objectFit: \"cover\", margin: \"0.5em\" }} src={robotImg(robotColor(sRobot))} />}\n                </HandBoxi> */}\n                <WoodButton onClick={clearHands}>\n                    <RefreshIcon fontSize=\"inherit\"/>\n                </WoodButton>\n            </div>\n            \n            <div style={{ gridColumn: \"1/3\", gridRow:\"2/4\"}}>\n                <HandsBox hands={hands} />\n            </div>\n        </HandsInputRoot>\n    )\n}\n\n",["130","131"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/recoil_states.tsx",["132"],"\nimport User from \"./shared/user\"\nimport { fetchMeAPI } from \"./util\"\n\nimport { atom, useSetRecoilState } from \"recoil\"\n\nexport const userState = atom<User | null>({\n    key: \"userState\",\n    default: null\n})\n\nexport function fetchMe(setUser:any) {\n    // const setUser = useSetRecoilState(userState)\n    fetchMeAPI()\n    .then((user) => setUser(user))\n    .catch((err)=>{console.log(\"aaa\"+err);setUser(null)});\n}","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/subrank.tsx",["133","134","135","136","137","138"],"import { Hand } from \"../game/hand\"\nimport User from \"./user\"\nimport styled, { keyframes } from \"styled-components\"\nimport { useRecoilValue } from \"recoil\"\nimport { userState } from \"../recoil_states\"\nimport { RefObject, useEffect, useRef, useState } from \"react\"\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\"\nimport { compSub } from \"../util\"\nimport Submission, {SubmissionModel} from \"./submission\"\nimport { SampleSubmission } from \"../sample\"\nimport {BurnedTitle} from \"./useful\"\n\nconst RankingBox = styled('div') `\n    white-space: nowrap;\n    width:100%;\n    height:100%;\n    display:flex;\n    flex-direction:column;\n    overflow-y:hidden;\n    overflow-x:hidden;\n`\n\n    /* animation:${p=>p.animate ? (p.mine?appear(p.sx,p.sy,p.pos):appear(\"0\", \"100vh\",p.pos)):\"\"} 2s ease-in-out; */\nconst AnimSubmission = styled(\"div\")<{pos:string}>`\n    position:absolute;\n    transform: translateY(${p=>p.pos});\n    transition:transform 0.5s; \n    box-sizing:border-box;\n    width:100%;\n    \n    z-index:10;\n    /* height:8ex; */\n\n    &.enter{\n        transform: translateY(-100vh);\n    }\n    &.exiting{\n        transform: translateY(100vh);\n    }\n`\n\nconst SubmissionsBox = styled(\"div\")`\n    position:relative;\n    width:100%;\n    height:100%;\n    margin-left:auto;\n    margin-right:0.5em;\n`\n\ninterface Props {\n    subs : SubmissionModel[],\n    playable : boolean,\n    playing? : number,\n    onPlay : (idx:number)=>void\n}\n\nconst RankDisp = styled(\"div\")<{h:number}>`\n    color: saddlebrown;\n    font-weight: bolder;\n    font-size: x-large;\n    height:${p=>p.h*1.10}px;\n    display:flex;\n    flex-direction:column;\n    margin-right:0.5em;\n    margin-left:0.5em;\n`\n\nexport default function SubRanking(props : Props){\n    const {subs, playable, onPlay, playing} = props\n    const sRef = useRef<HTMLDivElement>(null)\n    const [sHeight,setSHeight] = useState<number>(0)\n    const maxRank = 3\n\n    useEffect(()=>{\n        if(sRef.current)\n            setSHeight(sRef.current?.clientHeight)\n    }, [sRef.current?.clientHeight])\n\n    return (\n        <RankingBox>\n        <BurnedTitle>RANKING</BurnedTitle>\n        <div style={{width:\"100%\",height:\"100%\",display:\"flex\", flexWrap:\"nowrap\",paddingTop:\"12px\"}} >\n        <div>\n            {Array.from({length: maxRank}, (v, k) => <RankDisp key={k} h={sHeight}><div style={{marginTop:\"auto\",marginBottom:\"auto\"}}>{k + 1}.</div></RankDisp>)}\n        </div>\n        <SubmissionsBox>\n            <TransitionGroup component={null}>\n            {subs.slice().sort(compSub).slice(0,maxRank).map((sub, idx) =>\n                <CSSTransition key={sub.id} timeout={0.1}>\n                    <AnimSubmission \n                        pos={`${idx*110}%`}\n                    >\n                        <Submission sub={sub} playable={playable} onPlay={playable ? ()=>{onPlay(sub.id)} : undefined} playing={playing === sub.id}/>\n                    </AnimSubmission>\n                </CSSTransition>\n            )}\n            </TransitionGroup>\n            <div ref={sRef} style={{visibility:\"hidden\", position:\"absolute\"}}>\n                <Submission sub={SampleSubmission()}/>\n            </div>\n        </SubmissionsBox>\n        </div>\n    </RankingBox>\n    )\n}\n\nSubRanking.defaultProps = {\n    playable:false,\n    onPlay:()=>{},\n}","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/room.tsx",[],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/FadeinBox.tsx",["139"],"import styled from \"styled-components\"\nimport React, { useRef } from \"react\"\n\ninterface Props {\n    children:React.ReactNode,\n    show:boolean,\n    style?:any,\n}\n\nconst RootDiv = styled(\"div\")<{show:boolean}>`\n    height:${p=>p.show ? \"100%\" : \"0%\"};\n    transition:height 2s;\n`\n\nexport default function FadeinBox(props:Props) {\n    const {show, children, ...other} = props\n    \n    return (\n        <RootDiv show={show} {...other}>\n            {children}\n        </RootDiv>\n    )\n}",["140","141"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/sample.tsx",[],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/submission.tsx",["142","143","144","145","146","147","148","149","150","151","152","153"],"import { Hand } from \"../game/hand\"\nimport User from \"./user\"\nimport styled, { keyframes } from \"styled-components\"\nimport { useRecoilValue } from \"recoil\"\nimport { userState } from \"../recoil_states\"\nimport { useEffect, useRef, useState } from \"react\"\nimport { CSSTransition } from \"react-transition-group\"\nimport { compSub } from \"../util\"\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\nimport { FitSvgIcon, SvgIconButton } from \"./useful\"\nimport PlayCircleFilledIcon from '@material-ui/icons/PlayCircleFilled';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport SvgIcon from \"@material-ui/icons/PlayArrow\"\nimport StopIcon from '@material-ui/icons/Stop';\n\nexport interface SubmissionModel {\n    id:number\n    hands : Hand[]\n    user : User\n    date : Date\n    opt : Boolean\n}\n\n/* transform: translateY(${t}) translateX(${0}px); */\n\nconst shine = keyframes`\n  0% {\n    transform: scale(0) rotate(45deg);\n    opacity: 0;\n  }\n  80%{ \n    transform: scale(0) rotate(45deg);\n    opacity: 0.5;\n  }\n  81%{ \n    transform: scale(4) rotate(45deg);\n    opacity: 1;\n  }\n  100%{ \n    transform: scale(50) rotate(45deg);\n    opacity: 0;\n  }\n`\n\nconst ResBox = styled('div')<{opt:Boolean}>`\n    /* padding: 12px 12px 12px 5px; */\n    padding:0.6ex 1ex 0.8ex 0.6ex;\n    font-weight: bold;\n    /* border: inset 4px #a4c7cc;*/\n    border-radius:7px;\n    background-color: ${p=>p.opt?\"gold\":\"floralwhite\"}; \n    color: black;\n    text-shadow: 0 0 1px black;\n    box-shadow: 1px 1px 4px #8c6d55;\n    -webkit-text-decoration: none;\n    text-decoration: none;\n    display:grid;\n    grid-template-rows: 6fr 4fr;\n    grid-template-columns: 6fr 4fr;\n    overflow:hidden;\n    z-index:10;\n    /* position:absolute; */\n    min-height:fit-content;\n    height:fit-content;\n    width:100%;\n    box-sizing:border-box;\n    position:relative;\n    white-space:nowrap;\n    \n    &::before{ \n        content: '';\n        width: 1em;\n        height: 100%;\n        background-color: #fff;\n        animation: ${p=>p.opt ? shine : \"\"}  3s ease-in-out infinite;\n        position: absolute;\n        left: 0;\n        top:-180;\n        opacity: 0;\n        transform: rotate(45deg);\n    }\n`\n\nconst MainBox = styled.div`\n    text-align:center;\n    font-size:1.2rem;\n    grid-column:1;\n    grid-row:1;\n`\nconst NameText = styled.div`\n    text-align:right;\n    font-size:small;\n    grid-column:1/3;\n    grid-row:2;\n`\n\nconst RankBox = styled.div`\n    grid-column:1;\n    grid-row-start:1;\n    grid-row-end:2;\n    display:flex;\n    align-items:center;\n    flex-direction:vertical;\n    font-size:1.2rem;\n    /* color:#434fa9; */\n    width:100%;\n`\n\ninterface Props {\n  sub:SubmissionModel,\n  playable:boolean,\n  playing:boolean,\n  onPlay:()=>void,\n}\n\nexport default function Submission(props : Props) {\n    const {sub, playable, playing,onPlay} = props\n\n    return (\n        <ResBox opt={sub.opt}>\n            {/* {rank!==undefined&&<RankBox><div style={{marginLeft:\"auto\", marginRight:\"auto\"}}>{(rank + 1).toString()}</div></RankBox>} */}\n            <MainBox>{sub.hands.length.toString().padStart(2,\" \") +\" moves\"} </MainBox>\n            {playable &&\n            <div style={{gridRow:1, gridColumn:2,fontSize:\"x-large\", display:\"flex\", flexDirection:\"column\", alignSelf:\"center\", marginLeft:\"auto\",color:\"green\"}}>\n              <SvgIconButton onClick={playable ? onPlay : ()=>{}} selected={playing} fontSize={\"inherit\"} component={PlayCircleOutlineIcon} sComponent={StopIcon}/>\n            </div>}\n            <NameText>{`by ${sub.user.name}`}</NameText>\n        </ResBox>\n    )\n}\n\nSubmission.defaultProps = {\n  playable:false,\n  playing:false,\n  onPlay:()=>{},\n}","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/boardplayer.tsx",["154","155","156"],"import { useState, Reducer, useReducer, useEffect } from \"react\"\nimport HandsInput from \"../shared/hands_input\"\nimport { go, Pos } from \"../util\"\nimport Board, {BoardModel, BoardProps} from \"./board\"\nimport { Hand } from \"./hand\"\nimport { makeRobots, RobotModel } from \"./robot\"\n\n\ninterface SceneState {\n    time : number,\n    robots : RobotModel[],\n}\n\ninterface NextSceneAction {\n    type:\"next\",\n}\ninterface ResetSceneAction {\n    type: \"reset\",\n    hands: Hand[],\n}\n\ntype SceneAction = NextSceneAction | ResetSceneAction\n\nconst SceneReducer = (initPos: Pos[],hands : Hand[],board : BoardModel, onPlayEnd:()=>void) : React.Reducer<SceneState, SceneAction> => (state, action) => {\n    const {time,robots} = state\n    switch (action.type) {\n        case \"next\" :\n            console.log(\"next\")\n            if(time === hands.length) {\n                onPlayEnd()\n                return state//{time:0, robots:makeRobots(initPos),initPos:initPos, hands:hands, board:board}\n            }\n            var nps = go(board, robots.map(r=>r.pos), hands[time])\n            return {time:time + 1, robots:makeRobots(nps),initPos:initPos, hands:hands, board:board}\n        case \"reset\" :\n            console.log(\"reset\")\n            return {time:0, robots:makeRobots(initPos),initPos:initPos, hands:action.hands, board:board}\n    }\n}\n\ntype Props = Omit<BoardProps, \"onTransitionEnd\"> & {\n    hands:Hand[],\n    onPlayEnd:()=>void,\n} \n\nexport default function BoardPlayer (props:Props) {\n    const {hands,robots,onPlayEnd, ...rest} = props\n    const {board} = rest\n    const [scene, sceneDispatch] = useReducer(SceneReducer(robots.map(r=>r.pos), hands, board, onPlayEnd), {time:0, robots:robots})\n    \n    useEffect(()=>{\n        sceneDispatch({type:\"reset\", hands:hands})\n        console.log(\"changed\")\n        const id = setInterval(()=>{\n            sceneDispatch({type:\"next\"})\n        }, 300)\n        return ()=>{clearTimeout(id)}\n    }, [hands])\n\n    return (\n        <Board {...rest} robots={scene.robots} onTransitionEnd={ () => {\n            // sceneDispatch({type:\"next\", curtime:scene.time})\n        }}/>\n    )\n}\n\nBoardPlayer.defaultProps = {\n    hands:[],\n    onPlayEnd:()=>{}\n}","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/useful.tsx",[],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/arena.tsx",["157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/BigMsg.tsx",["174"],{"ruleId":"175","severity":1,"message":"176","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":13},{"ruleId":"175","severity":1,"message":"179","line":5,"column":22,"nodeType":"177","messageId":"178","endLine":5,"endColumn":36},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","replacedBy":"183"},{"ruleId":"175","severity":1,"message":"184","line":1,"column":8,"nodeType":"177","messageId":"178","endLine":1,"endColumn":13},{"ruleId":"180","replacedBy":"185"},{"ruleId":"182","replacedBy":"186"},{"ruleId":"175","severity":1,"message":"187","line":3,"column":10,"nodeType":"177","messageId":"178","endLine":3,"endColumn":14},{"ruleId":"188","severity":1,"message":"189","line":174,"column":5,"nodeType":"190","endLine":174,"endColumn":7,"suggestions":"191"},{"ruleId":"180","replacedBy":"192"},{"ruleId":"182","replacedBy":"193"},{"ruleId":"175","severity":1,"message":"194","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":25},{"ruleId":"175","severity":1,"message":"195","line":1,"column":27,"nodeType":"177","messageId":"178","endLine":1,"endColumn":35},{"ruleId":"175","severity":1,"message":"196","line":9,"column":9,"nodeType":"177","messageId":"178","endLine":9,"endColumn":14},{"ruleId":"175","severity":1,"message":"197","line":10,"column":10,"nodeType":"177","messageId":"178","endLine":10,"endColumn":14},{"ruleId":"175","severity":1,"message":"198","line":10,"column":16,"nodeType":"177","messageId":"178","endLine":10,"endColumn":24},{"ruleId":"175","severity":1,"message":"199","line":2,"column":10,"nodeType":"177","messageId":"178","endLine":2,"endColumn":27},{"ruleId":"175","severity":1,"message":"196","line":4,"column":9,"nodeType":"177","messageId":"178","endLine":4,"endColumn":14},{"ruleId":"175","severity":1,"message":"196","line":1,"column":9,"nodeType":"177","messageId":"178","endLine":1,"endColumn":14},{"ruleId":"175","severity":1,"message":"200","line":3,"column":22,"nodeType":"177","messageId":"178","endLine":3,"endColumn":32},{"ruleId":"175","severity":1,"message":"201","line":13,"column":12,"nodeType":"177","messageId":"178","endLine":13,"endColumn":16},{"ruleId":"180","replacedBy":"185"},{"ruleId":"182","replacedBy":"186"},{"ruleId":"175","severity":1,"message":"202","line":5,"column":17,"nodeType":"177","messageId":"178","endLine":5,"endColumn":20},{"ruleId":"175","severity":1,"message":"203","line":10,"column":8,"nodeType":"177","messageId":"178","endLine":10,"endColumn":15},{"ruleId":"175","severity":1,"message":"204","line":18,"column":10,"nodeType":"177","messageId":"178","endLine":18,"endColumn":20},{"ruleId":"175","severity":1,"message":"205","line":40,"column":7,"nodeType":"177","messageId":"178","endLine":40,"endColumn":14},{"ruleId":"175","severity":1,"message":"206","line":54,"column":7,"nodeType":"177","messageId":"178","endLine":54,"endColumn":13},{"ruleId":"207","severity":1,"message":"208","line":117,"column":13,"nodeType":"209","endLine":117,"endColumn":198},{"ruleId":"210","severity":1,"message":"211","line":235,"column":21,"nodeType":"212","messageId":"213","endLine":235,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":243,"column":20,"nodeType":"212","messageId":"213","endLine":243,"endColumn":22},{"ruleId":"210","severity":1,"message":"211","line":246,"column":20,"nodeType":"212","messageId":"213","endLine":246,"endColumn":22},{"ruleId":"188","severity":1,"message":"214","line":254,"column":8,"nodeType":"190","endLine":254,"endColumn":15,"suggestions":"215"},{"ruleId":"188","severity":1,"message":"216","line":279,"column":8,"nodeType":"190","endLine":279,"endColumn":22,"suggestions":"217"},{"ruleId":"180","replacedBy":"218"},{"ruleId":"182","replacedBy":"219"},{"ruleId":"175","severity":1,"message":"220","line":5,"column":16,"nodeType":"177","messageId":"178","endLine":5,"endColumn":33},{"ruleId":"175","severity":1,"message":"221","line":1,"column":10,"nodeType":"177","messageId":"178","endLine":1,"endColumn":14},{"ruleId":"175","severity":1,"message":"222","line":2,"column":8,"nodeType":"177","messageId":"178","endLine":2,"endColumn":12},{"ruleId":"175","severity":1,"message":"223","line":3,"column":18,"nodeType":"177","messageId":"178","endLine":3,"endColumn":27},{"ruleId":"175","severity":1,"message":"224","line":4,"column":10,"nodeType":"177","messageId":"178","endLine":4,"endColumn":24},{"ruleId":"175","severity":1,"message":"225","line":5,"column":10,"nodeType":"177","messageId":"178","endLine":5,"endColumn":19},{"ruleId":"175","severity":1,"message":"226","line":6,"column":10,"nodeType":"177","messageId":"178","endLine":6,"endColumn":19},{"ruleId":"175","severity":1,"message":"227","line":2,"column":17,"nodeType":"177","messageId":"178","endLine":2,"endColumn":23},{"ruleId":"180","replacedBy":"228"},{"ruleId":"182","replacedBy":"229"},{"ruleId":"175","severity":1,"message":"224","line":4,"column":10,"nodeType":"177","messageId":"178","endLine":4,"endColumn":24},{"ruleId":"175","severity":1,"message":"225","line":5,"column":10,"nodeType":"177","messageId":"178","endLine":5,"endColumn":19},{"ruleId":"175","severity":1,"message":"194","line":6,"column":10,"nodeType":"177","messageId":"178","endLine":6,"endColumn":19},{"ruleId":"175","severity":1,"message":"227","line":6,"column":21,"nodeType":"177","messageId":"178","endLine":6,"endColumn":27},{"ruleId":"175","severity":1,"message":"195","line":6,"column":29,"nodeType":"177","messageId":"178","endLine":6,"endColumn":37},{"ruleId":"175","severity":1,"message":"230","line":7,"column":10,"nodeType":"177","messageId":"178","endLine":7,"endColumn":23},{"ruleId":"175","severity":1,"message":"231","line":8,"column":10,"nodeType":"177","messageId":"178","endLine":8,"endColumn":17},{"ruleId":"175","severity":1,"message":"232","line":9,"column":8,"nodeType":"177","messageId":"178","endLine":9,"endColumn":21},{"ruleId":"175","severity":1,"message":"233","line":10,"column":10,"nodeType":"177","messageId":"178","endLine":10,"endColumn":20},{"ruleId":"175","severity":1,"message":"234","line":11,"column":8,"nodeType":"177","messageId":"178","endLine":11,"endColumn":28},{"ruleId":"175","severity":1,"message":"203","line":13,"column":8,"nodeType":"177","messageId":"178","endLine":13,"endColumn":15},{"ruleId":"175","severity":1,"message":"235","line":97,"column":7,"nodeType":"177","messageId":"178","endLine":97,"endColumn":14},{"ruleId":"175","severity":1,"message":"195","line":1,"column":10,"nodeType":"177","messageId":"178","endLine":1,"endColumn":18},{"ruleId":"175","severity":1,"message":"236","line":1,"column":20,"nodeType":"177","messageId":"178","endLine":1,"endColumn":27},{"ruleId":"175","severity":1,"message":"237","line":2,"column":8,"nodeType":"177","messageId":"178","endLine":2,"endColumn":18},{"ruleId":"175","severity":1,"message":"238","line":1,"column":16,"nodeType":"177","messageId":"178","endLine":1,"endColumn":26},{"ruleId":"175","severity":1,"message":"231","line":5,"column":21,"nodeType":"177","messageId":"178","endLine":5,"endColumn":28},{"ruleId":"175","severity":1,"message":"239","line":5,"column":46,"nodeType":"177","messageId":"178","endLine":5,"endColumn":54},{"ruleId":"175","severity":1,"message":"240","line":7,"column":9,"nodeType":"177","messageId":"178","endLine":7,"endColumn":20},{"ruleId":"175","severity":1,"message":"220","line":13,"column":26,"nodeType":"177","messageId":"178","endLine":13,"endColumn":43},{"ruleId":"175","severity":1,"message":"241","line":14,"column":10,"nodeType":"177","messageId":"178","endLine":14,"endColumn":17},{"ruleId":"175","severity":1,"message":"242","line":16,"column":8,"nodeType":"177","messageId":"178","endLine":16,"endColumn":17},{"ruleId":"175","severity":1,"message":"243","line":19,"column":8,"nodeType":"177","messageId":"178","endLine":19,"endColumn":19},{"ruleId":"175","severity":1,"message":"244","line":46,"column":7,"nodeType":"177","messageId":"178","endLine":46,"endColumn":13},{"ruleId":"175","severity":1,"message":"245","line":120,"column":16,"nodeType":"177","messageId":"178","endLine":120,"endColumn":22},{"ruleId":"175","severity":1,"message":"246","line":120,"column":34,"nodeType":"177","messageId":"178","endLine":120,"endColumn":41},{"ruleId":"247","severity":1,"message":"248","line":132,"column":21,"nodeType":"177","messageId":"249","endLine":132,"endColumn":23},{"ruleId":"188","severity":1,"message":"250","line":237,"column":8,"nodeType":"190","endLine":237,"endColumn":14,"suggestions":"251"},{"ruleId":"188","severity":1,"message":"252","line":242,"column":8,"nodeType":"190","endLine":242,"endColumn":22,"suggestions":"253"},{"ruleId":"210","severity":1,"message":"254","line":294,"column":142,"nodeType":"212","messageId":"213","endLine":294,"endColumn":144},{"ruleId":"210","severity":1,"message":"211","line":307,"column":74,"nodeType":"212","messageId":"213","endLine":307,"endColumn":76},{"ruleId":"210","severity":1,"message":"211","line":307,"column":97,"nodeType":"212","messageId":"213","endLine":307,"endColumn":99},{"ruleId":"188","severity":1,"message":"255","line":59,"column":8,"nodeType":"190","endLine":59,"endColumn":20,"suggestions":"256"},"@typescript-eslint/no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'useRecoilState' is defined but never used.","no-native-reassign",["257"],"no-negated-in-lhs",["258"],"'react' is defined but never used.",["257"],["258"],"'Game' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.","ArrayExpression",["259"],["257"],["258"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Color' is defined but never used.","'cast' is defined but never used.","'Castable' is defined but never used.","'DetailedHTMLProps' is defined but never used.","'fetchMeAPI' is defined but never used.","'user' is assigned a value but never used.","'css' is defined but never used.","'SvgIcon' is defined but never used.","'parseHands' is defined but never used.","'DirText' is assigned a value but never used.","'ResBox' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'clearHands', 'onSubmit', and 'rmHand'. Either include them or remove the dependency array.",["260"],"React Hook useEffect has a missing dependency: 'pressArrow'. Either include it or remove the dependency array.",["261"],["257"],["258"],"'useSetRecoilState' is defined but never used.","'Hand' is defined but never used.","'User' is defined but never used.","'keyframes' is defined but never used.","'useRecoilValue' is defined but never used.","'userState' is defined but never used.","'RefObject' is defined but never used.","'useRef' is defined but never used.",["257"],["258"],"'CSSTransition' is defined but never used.","'compSub' is defined but never used.","'PlayArrowIcon' is defined but never used.","'FitSvgIcon' is defined but never used.","'PlayCircleFilledIcon' is defined but never used.","'RankBox' is assigned a value but never used.","'Reducer' is defined but never used.","'HandsInput' is defined but never used.","'BoardModel' is defined but never used.","'simulate' is defined but never used.","'ClientEvent' is defined but never used.","'fetchMe' is defined but never used.","'FadeinBox' is defined but never used.","'BoardPlayer' is defined but never used.","'Screen' is assigned a value but never used.","'robots' is assigned a value but never used.","'reached' is assigned a value but never used.","@typescript-eslint/no-redeclare","'np' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'procServerEvent'. Either include it or remove the dependency array.",["262"],"React Hook useEffect has an unnecessary dependency: 'bBox.current'. Either exclude it or remove the dependency array. Mutable values like 'bBox.current' aren't valid dependencies because mutating them doesn't re-render the component.",["263"],"Expected '!==' and instead saw '!='.","React Hook useEffect has a missing dependency: 'timeout'. Either include it or remove the dependency array.",["264"],"no-global-assign","no-unsafe-negation",{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},{"desc":"271","fix":"272"},{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"277","text":"278"},"Update the dependencies array to be: [clearHands, hands, onSubmit, rmHand]",{"range":"279","text":"280"},"Update the dependencies array to be: [arrowPressed, pressArrow]",{"range":"281","text":"282"},"Update the dependencies array to be: [procServerEvent, user]",{"range":"283","text":"284"},"Update the dependencies array to be: []",{"range":"285","text":"286"},"Update the dependencies array to be: [text, show, timeout]",{"range":"287","text":"288"},[4348,4350],"[downHandler, upHandler]",[7078,7085],"[clearHands, hands, onSubmit, rmHand]",[7882,7896],"[arrowPressed, pressArrow]",[8383,8389],"[procServerEvent, user]",[8531,8545],"[]",[1652,1664],"[text, show, timeout]"]