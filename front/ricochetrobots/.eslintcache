[{"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/App.tsx":"1","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/header.tsx":"2","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/util.tsx":"3","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/board.tsx":"4","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/robot.tsx":"5","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/hand.tsx":"6","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/login.tsx":"7","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/index.js":"8","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/arena/arena.tsx":"9","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/hands_input.tsx":"10","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/recoil_states.tsx":"11","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/subrank.tsx":"12","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/room.tsx":"13"},{"size":1302,"mtime":1609747141951,"results":"14","hashOfConfig":"15"},{"size":3189,"mtime":1609785349899,"results":"16","hashOfConfig":"15"},{"size":4257,"mtime":1610043089495,"results":"17","hashOfConfig":"15"},{"size":3311,"mtime":1609918728210,"results":"18","hashOfConfig":"15"},{"size":719,"mtime":1609942485854,"results":"19","hashOfConfig":"15"},{"size":254,"mtime":1607685692010,"results":"20","hashOfConfig":"15"},{"size":2595,"mtime":1608995054628,"results":"21","hashOfConfig":"15"},{"size":218,"mtime":1606986828234,"results":"22","hashOfConfig":"15"},{"size":7455,"mtime":1610046721067,"results":"23","hashOfConfig":"15"},{"size":8874,"mtime":1610039944626,"results":"24","hashOfConfig":"15"},{"size":413,"mtime":1609055920023,"results":"25","hashOfConfig":"15"},{"size":5542,"mtime":1610046660851,"results":"26","hashOfConfig":"15"},{"size":145,"mtime":1609747126311,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},"1xelvjt",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/App.tsx",["65","66"],"import Arena from \"./arena/arena\"\nimport Header from \"./header\"\nimport styled from \"styled-components\"\nimport Login from \"./login\"\nimport { RecoilRoot, useRecoilState, useSetRecoilState } from \"recoil\"\nimport woodImg from \"./img/wood.jpg\"\n\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport RoomList from \"./room\"\nimport { fetchMe, userState } from \"./recoil_states\"\nimport { useEffect } from \"react\"\n\nconst TestBox = styled(\"div\")`\n  position:relative;\n  height:calc(100% - 6ex);\n`\n\nconst RootDiv = styled.div`\n  width:100%;\n  height:100%;\n  overflow:hidden;\n  background-image:url(${woodImg});\n  background-repeat:repeat;\n`\n\nfunction App() {\n  return (\n    <RootDiv>\n      <RecoilRoot>\n          <InnerApp />\n      </RecoilRoot>\n    </RootDiv>\n  );\n}\n\nfunction InnerApp() {\n  const setUser = useSetRecoilState(userState)\n\n  useEffect(() => {\n    fetchMe(setUser)\n  }, [setUser]);\n\n  return (\n    <Router>\n      <div style={{ position: \"relative\", height: \"6ex\" }}>\n        <Header />\n      </div>\n      <TestBox>\n        <Switch>\n          <Route exact path=\"/\">\n            <Arena />\n          </Route>\n          <Route exact path=\"/roomlist\">\n            <RoomList />\n          </Route>\n        </Switch>\n      </TestBox>\n        </Router>\n  )\n}\n\nexport default App;\n",["67","68"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/header.tsx",["69"],"import react, { useState } from \"react\"\nimport { useRecoilState } from \"recoil\"\nimport styled from \"styled-components\"\nimport {fetchMe, userState} from \"./recoil_states\"\nimport { API_SERVER } from \"./util\"\nimport {useHistory} from \"react-router-dom\"\nimport { CircularProgress } from \"@material-ui/core\"\ninterface Props {\n\n}\n\nconst HeaderBox = styled(\"div\")`\n    width:100%;\n    height:100%;\n    position:relative;\n    background-color:rgba(255,255,255,0.48);\n    box-shadow:0px 0px 5px black;\n    color:saddlebrown;\n    display:flex;\n`\n\nconst HeaderContent = styled(\"div\")`\n    /* height:100%; */\n    width:fit-content;\n    font-size:x-large;\n    text-align:center;\n    font-weight:bold;\n    display:flex;\n    flex-direction:column;\n    justify-content:center;\n    padding-left: 0.25em;\n    padding-right: 0.25em;\n    margin-left: 0.25em;\n    margin-right: 0.25em;\n    box-sizing: border-box;\n`\n\nconst HeaderButton = styled(HeaderContent)`\n    /* background-color:rgba(0,0,0,0.15); */\n    /* margin-left:0.5em; */\n    border: outset 3px #8040129e;\n    border-radius: 7px;\n    margin-top:2.5px;\n    margin-bottom:2.5px;\n    \n    &:hover {\n        /* line-height:103%; */\n        border: inset 3px #8040129e;\n        cursor:pointer;\n    }\n`\n\n\nconst RightBox = styled(\"div\") `\n    display:flex;\n`\n\nconst LeftBox = styled(\"div\") `\n    margin-left: auto;\n    margin-right: 1vw;\n    display:flex;\n`\n\nexport default function Header(props : Props) {\n    const [loading, setLoading] = useState(false)\n    const [user, setUser] = useRecoilState(userState)\n\n    const loginreq = () => {\n        setLoading(true)\n        fetch(API_SERVER+\"/twitter/signin\", {mode:\"same-origin\"})\n            .then((res) => res.json() )\n            .then((data) => {\n                console.log(data)\n                const w = window.open(data[\"url\"],\"twitter-login\", 'width=300,height=300')\n                if(w){\n                    w.focus()\n                    var timer = setInterval(function() { \n                        if(w.closed) {\n                            clearInterval(timer);\n                            fetchMe(setUser)\n                            setLoading(false)\n                        }\n                    }, 1000);\n                }\n            })\n            .catch((err) => console.error(err));\n            }\n\n    const logoutreq = () => {\n        fetch(API_SERVER+\"/signout\", {mode:\"same-origin\"})\n        .then(()=>setUser(null))\n        .catch((err) => console.error(err));\n    }\n\n    let history = useHistory();\n    return (\n        <HeaderBox> \n            <RightBox>\n            <HeaderButton onClick={()=>{history.push(\"/\")}}>Arena</HeaderButton>\n            <HeaderButton onClick={()=>{history.push(\"/roomlist\")}}>Rooms</HeaderButton>\n            </RightBox>\n            <LeftBox>\n            {user!==null && <HeaderContent>{user.name}</HeaderContent> }\n            {user!==null && <HeaderButton onClick={logoutreq}>LOGOUT</HeaderButton> }\n            {user!==null || (loading ? <HeaderContent><CircularProgress color=\"inherit\"/></HeaderContent> :\n                <HeaderButton onClick={loginreq}>LOGIN</HeaderButton> )\n            }\n            </LeftBox>\n        </HeaderBox>\n    )\n}",["70","71"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/util.tsx",["72","73","74","75"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/board.tsx",["76","77","78","79","80"],"import React, {useEffect, useState} from 'react';\nimport wallImg from \"../img/wall.png\"\nimport groundImg from \"../img/ground.png\"\nimport centerImg from \"../img/center.png\"\nimport goalImg from \"../img/goal.png\"\nimport styled from \"styled-components\"\n\nimport Robot, {RobotModel} from \"./robot\"\nimport {Color} from \"../util\"\nimport { cast, Castable } from '@bitr/castable';\n\n\nclass CellModel {\n    walls : [boolean, boolean, boolean, boolean]\n    mirror : '/' | '\\\\' | undefined\n    // mark: Color | undefined\n    goal: boolean\n    constructor (){\n        this.walls = [false,false,false,false]\n        this.goal = false\n    }\n}\n\nexport class BoardModel {\n    height:number\n    width: number\n    cells: CellModel[][]\n\n    constructor (width:number, height:number){\n        this.width = width\n        this.height = height\n        this.cells = []\n        for(var i:number = 0; height > i; i++){\n            this.cells[i] = []\n            for(var j:number = 0; width > j; j++){\n                this.cells[i][j] = new CellModel();\n            }\n        }\n    }\n}\n\n\nconst CellObj = styled(\"img\")<{deg?:number}>`\n    alt:W;\n    transform:rotate(${props => props.deg?props.deg:0}deg);\n    display:relative;\n    z-index:20;\n    margin-top:-100%;\n    height:100%;\n    width:auto;\n`\nfunction Cell(props: {cell:CellModel}){\n    const {cell} = props\n    return (\n        <div style={{width:\"auto\", height:\"100%\"}}>\n            <img src={groundImg} alt=\"ground\" height=\"100%\" width=\"auto\"/>\n            {cell.walls[0] && cell.walls[1] && cell.walls[2] && cell.walls[3] && \n                <CellObj src={centerImg}/>\n            }\n            {cell.walls[0] && <CellObj deg={0} src={wallImg}/>}\n            {cell.walls[1] && <CellObj deg={90} src={wallImg}/>}\n            {cell.walls[2] && <CellObj deg={180} src={wallImg}/>}\n            {cell.walls[3] && <CellObj deg={270} src={wallImg}/>}\n            {cell.goal && <CellObj deg={0} src={goalImg}/>}\n        </div>\n    )\n}\n\nconst Row = styled(\"div\")<{h:number}>`\n    font-size:0px;\n    width:100%;\n    height:calc(100%/${props=>props.h});\n    display:flex;\n    flex-wrap:no-wrap;\n`\nconst Grid = styled(\"div\")<{cellSize: number, w: number, h:number}>`\n    width:${props=>props.cellSize*props.w}px;\n    height:${props=>props.cellSize*props.h}px;\n`\n\ninterface Props{\n    board : BoardModel\n    cellSize: number\n    robots : RobotModel[]\n    mainRobot: number\n}\n\nexport default function Board(props : Props) {\n    const {board, cellSize, robots, mainRobot} = props\n    \n    // useEffect(()=>{\n    //     console.log(board)\n    // },[board])\n\n    return (\n        <Grid cellSize={cellSize} w={board.width} h={board.height}>\n            {board.cells.map((row,idx) => {\n                return <Row h={board.height} key={\"row\"+idx.toString()}>\n                {row.map((cell,idx2) => {\n                    return <Cell cell={cell} key={\"cell\"+idx2.toString()}/>\n                })}\n                </Row>\n            })}\n            {\n                robots.map((robot,idx) => \n                    <Robot robot={robot} cellSize={cellSize} key={\"robot\"+idx.toString()}/>\n                )\n            }\n            <Robot robot={{idx:mainRobot, pos:{x:board.width/2-0.5, y:board.height/2-0.5}}}  cellSize={cellSize}/>\n        </Grid>\n    );\n}\n\nBoard.defaultProps = {\n    robots : []\n}\n",["81","82"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/robot.tsx",["83"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/game/hand.tsx",["84"],"import {Color} from \"../util\"\n\n//Dir 方向　上下左右\nexport type Dir = string\n\nexport const UP: Dir = \"up\"\nexport const RT: Dir = \"rt\"\nexport const DN: Dir = \"dn\"\nexport const LT: Dir = \"lt\"\n\nexport interface Hand {\n\trobot: number\n    dir :  Dir\n}\n","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/login.tsx",["85","86"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/index.js",[],["87","88"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/arena/arena.tsx",["89","90","91","92","93","94","95","96","97","98"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/hands_input.tsx",["99","100","101","102","103","104","105","106","107","108"],"import React, { useRef } from \"react\"\nimport { Dir, UP, RT, DN, LT, Hand } from \"../game/hand\"\nimport { useEffect, useState } from \"react\"\nimport { robotColor, robotImg, useKeyPress } from \"../util\"\nimport styled, {css, keyframes} from \"styled-components\"\nimport ArrowBackIcon from \"@material-ui/icons/ArrowBack\"\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\"\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport SvgIcon from \"@material-ui/icons/ArrowBack\"\nimport RefreshIcon from '@material-ui/icons/Refresh';\nimport SendIcon from '@material-ui/icons/Send';\nimport SimpleBar from \"simplebar-react\"\nimport 'simplebar/dist/simplebar.min.css';\nimport { CircularProgress } from \"@material-ui/core\"\n\nfunction parseHands(str: string): Hand[] {\n    var ret: Hand[] = []\n    if (ret.length % 2 !== 0) throw new Error(\"invalid format\")\n\n    for (var i = 0; i < str.length; i += 2) {\n        var robot: number\n        var dir: Dir\n\n        robot = parseInt(str[i])\n        switch (str[i + 1]) {\n            case \"u\": dir = UP; break;\n            case \"r\": dir = RT; break;\n            case \"d\": dir = DN; break;\n            case \"l\": dir = LT; break;\n            default: throw new Error(\"invalid direction\")\n        }\n        ret.push({ robot: robot, dir: dir })\n    }\n\n    return ret\n}\n\nconst DirText = styled(\"div\")`\n    color:white;\n    font-weight:bold;\n    font-size:xx-large;\n`\n\nconst slide = keyframes`\n    0%{\n        transform:translateY(-100%);\n    }\n    100%{\n        transform:translateY(0);\n    }\n`  \n\nconst HandBoxi = styled(\"div\")`\n    display:flex;\n    flex-wrap:nowrap;\n    text-align:center; \n\n    box-sizing:border-box;\n    /* width:100%; */\n    font-weight: bold;\n    border-radius:7px;\n    background-color: floralwhite; \n    color: black;\n    text-shadow: 0 0 1px black;\n    box-shadow: 1px 1px 4px #8c6d55;\n    margin:2px 2px 2px 2px;\n    text-decoration: none;\n    overflow:hidden;\n    z-index:-1;\n    /* animation:${slide} 1s ease-in-out;\n    transition:all 0.5s;  */\n`\n\n\nconst ResBox = styled('div')`\n    box-sizing:border-box;\n    width:100%;\n    /* padding: 12px 12px 12px 5px; */\n    /* margin: 12px 12px 12px 0px; */\n    font-weight: bold;\n    /* border: inset 4px #a4c7cc;*/\n    border-radius:7px;\n    background-color: \"floralwhite\"; \n    color: black;\n    text-shadow: 0 0 1px black;\n    box-shadow: 1px 1px 4px #8c6d55;\n    -webkit-text-decoration: none;\n    text-decoration: none;\n    /* display:grid;\n    grid-template-rows: 60% 40%;\n    grid-template-columns: 20% 40% 40%; */\n    overflow:hidden;\n`\n\nfunction toArrow(dir: Dir) {\n    switch (dir) {\n        case UP:\n            return ArrowUpwardIcon\n        case RT:\n            return ArrowForwardIcon\n        case DN:\n            return ArrowDownwardIcon\n        case LT:\n            return ArrowBackIcon\n        default:\n            return ArrowUpwardIcon\n    }\n}\n\nfunction HandBox(props: { hand: Hand , r: number}) {\n    const { hand, r } = props;\n\n    return (\n        <HandBoxi>\n            {r}\n            <img style={{ objectFit: \"cover\", margin: \"0.5em\", width: \"5em\", height: \"5em\", alignSelf: \"center\" }} src={robotImg(robotColor(hand.robot))} />\n            <div style={{ fontSize: \"4em\", display: \"flex\", flexDirection: \"column\", justifyContent: \"center\" }}>\n                <SvgIcon component={toArrow(hand.dir)} fontSize=\"inherit\" style={{ alignSelf: \"center\" }} />\n            </div>\n        </HandBoxi>\n    )\n}\n\nconst ScrollBox = styled(SimpleBar)`\n    /* border: solid saddlebrown; */\n    height:100%;\n    /* border-radius: 10px; */\n        position:relative;\n        box-shadow: 0px 0px 10px 0px saddlebrown inset;\n    /* &::before{\n        position:relative;\n        height:100%;\n        width:100%;\n        background-color: rgba(0,0,0,0.05);\n        box-shadow: 0px 0px 10px 0px saddlebrown inset;\n        content:\"aaa\";\n        z-index:100;\n    } */\n`\n\nconst InnerBox = styled(\"div\")`\n    background-color: rgba(0,0,0,0.05);\n    position:relative;\n    min-height:100vh;\n    padding:0.5em 0.5em 1em 0.5em;\n/* box-shadow: 0px 0px 10px 0px saddlebrown inset; */\n    /* border-radius: 10px; */\n    justify-content:flex-end;\n    display:flex; \n    flex-direction:column-reverse; \n    z-index:-2;\n`\n\nfunction HandsBox(props: { hands: Hand[] }) {\n    const { hands } = props;\n    const ref = useRef<HTMLDivElement>(null)\n    useEffect(()=>{\n        if(ref.current === null) return;\n        ref.current.scrollTop = 0\n    }, [hands])\n\n    return (\n        <ScrollBox autoHide={true} scrollableNodeProps={{ ref: ref }}>\n            <InnerBox>\n            {hands.map((hand, idx) => <HandBox hand={hand} key={\"hand\" + idx.toString()} r={hands.length - idx}/>)}\n            </InnerBox>\n        </ScrollBox>\n    )\n}\n\nconst HandsInputRoot = styled(\"div\")`\n    display:grid;\n    width:15vw; \n    height:100%;\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: 5em 1fr;\n`\n\nconst WoodButton = styled(\"button\")`\n    /* background-color:rgba(0,0,0,0.15); */\n    /* margin-left:0.5em; */\n    border: outset 5px #8040129e;\n    border-radius: 7px;\n    margin-top:2.5px;\n    margin-bottom:2.5px;\n    width:100%;\n    height:calc(100% - 5px);\n    box-sizing:border-box;\n\n    justify-content: center;\n    font-weight: bolder;\n    text-align: center;\n    align-items:center;\n    flex-direction: column;\n    display: flex;\n    font-size: xxx-large;\n    color: saddlebrown;\n\n    background-color:rgba(255,255,255,0.2);\n    \n    &:hover {\n        background-color:rgba(0,0,0,0);\n        border: inset 5px #8040129e;\n        cursor:pointer;\n    }\n    &:disabled{\n        background-color:rgba(255,255,255,0.2);\n        border: outset 5px #8040129e;\n        opacity: 0.5;\n        cursor: default;\n    }\n`\n\ninterface Props {\n    addHand: (hands: Hand) => void\n    rmHand: () => void\n    clearHands: () => void\n    onSubmit: () => void\n    disabled: boolean\n    sending: boolean\n    hands: Hand[]\n}\n\nexport default function HandsInput(props: Props) {\n    const {hands, addHand, rmHand, clearHands, onSubmit, disabled, sending} = props\n\n    const robotPressed = useKeyPress([\"1\", \"2\", \"3\", \"4\", \"0\"])\n    const arrowPressed = useKeyPress([\"ArrowUp\", \"ArrowRight\", \"ArrowLeft\", \"ArrowDown\"])\n    const [sRobot, setsRobot] = useState<number | null>(null)\n\n    useEffect(() => {\n        var bef = Date.now()\n        const bsHandler = ({ key }: { key: string }) => {\n            if (key == \"Backspace\") {\n                var time = Date.now()\n                \n                if(bef + 100 < time){\n                    rmHand()\n                    bef = time\n                }\n            }\n            if(key == \"Enter\") {\n                onSubmit()\n            }\n            if(key == \"r\"){\n                clearHands()\n            }\n        }\n        window.addEventListener('keydown', bsHandler);\n        return () => {\n            window.removeEventListener('keydown', bsHandler);\n        };\n    }, [hands]);\n\n    useEffect(() => {\n        if (robotPressed.has(\"0\")) setsRobot(0)\n        else if (robotPressed.has(\"1\")) setsRobot(1)\n        else if (robotPressed.has(\"2\")) setsRobot(2)\n        else if (robotPressed.has(\"3\")) setsRobot(3)\n        else if (robotPressed.has(\"4\")) setsRobot(4)\n        else setsRobot(null)\n    }, [robotPressed])\n\n    const pressArrow = (dir: Dir) => {\n        if (sRobot == null) return;\n        try {\n            addHand({ robot: sRobot, dir: dir })\n        } catch (e: any) {\n\n        }\n    }\n\n    useEffect(() => {\n        if (arrowPressed.has(\"ArrowUp\")) pressArrow(UP)\n        else if (arrowPressed.has(\"ArrowRight\")) pressArrow(RT)\n        else if (arrowPressed.has(\"ArrowDown\")) pressArrow(DN)\n        else if (arrowPressed.has(\"ArrowLeft\")) pressArrow(LT)\n    }, [arrowPressed])\n\n    const handleSubmit = () => {\n        onSubmit()\n        // setHands([])\n    }\n\n    return (\n        <HandsInputRoot>\n            {/* <div > */}\n            <div style={{ gridColumnStart: \"1\", gridColumnEnd: \"2\", width:\"100%\", height:\"100%\" }} >\n                <WoodButton disabled={!disabled} onClick={handleSubmit} id=\"SendButton\">\n                    {sending ?  <CircularProgress color=\"inherit\"/> : <SendIcon fontSize=\"inherit\"/>}\n                </WoodButton>\n            </div>\n            <div style={{ gridColumnStart: \"2\", gridColumnEnd: \"3\" }} >\n                {/* <HandBoxi>\n                    {sRobot !== null && <img style={{ objectFit: \"cover\", margin: \"0.5em\" }} src={robotImg(robotColor(sRobot))} />}\n                </HandBoxi> */}\n                <WoodButton onClick={clearHands}>\n                    <RefreshIcon fontSize=\"inherit\"/>\n                </WoodButton>\n            </div>\n            \n            <div style={{ gridColumn: \"1/3\", gridRow:\"2/4\"}}>\n                <HandsBox hands={hands} />\n            </div>\n        </HandsInputRoot>\n    )\n}\n\n","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/recoil_states.tsx",["109"],"\nimport User from \"./shared/user\"\nimport { fetchMeAPI } from \"./util\"\n\nimport { atom, useSetRecoilState } from \"recoil\"\n\nexport const userState = atom<User | null>({\n    key: \"userState\",\n    default: null\n})\n\nexport function fetchMe(setUser:any) {\n    // const setUser = useSetRecoilState(userState)\n    fetchMeAPI()\n    .then((user) => setUser(user))\n    .catch((err)=>{console.log(\"aaa\"+err);setUser(null)});\n}","/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/shared/subrank.tsx",["110","111","112"],"/home/akihiro/repos/RicochetRobotsWeb/front/ricochetrobots/src/room.tsx",[],["113","114"],{"ruleId":"115","severity":1,"message":"116","line":4,"column":8,"nodeType":"117","messageId":"118","endLine":4,"endColumn":13},{"ruleId":"115","severity":1,"message":"119","line":5,"column":22,"nodeType":"117","messageId":"118","endLine":5,"endColumn":36},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"115","severity":1,"message":"124","line":1,"column":8,"nodeType":"117","messageId":"118","endLine":1,"endColumn":13},{"ruleId":"120","replacedBy":"125"},{"ruleId":"122","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":104,"column":27,"nodeType":"129","messageId":"130","endLine":104,"endColumn":38,"fix":"131"},{"ruleId":"127","severity":1,"message":"132","line":104,"column":40,"nodeType":"129","messageId":"130","endLine":104,"endColumn":49,"fix":"133"},{"ruleId":"127","severity":1,"message":"134","line":104,"column":51,"nodeType":"129","messageId":"130","endLine":104,"endColumn":72,"fix":"135"},{"ruleId":"136","severity":1,"message":"137","line":168,"column":5,"nodeType":"138","endLine":168,"endColumn":7,"suggestions":"139"},{"ruleId":"115","severity":1,"message":"140","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":25},{"ruleId":"115","severity":1,"message":"141","line":1,"column":27,"nodeType":"117","messageId":"118","endLine":1,"endColumn":35},{"ruleId":"115","severity":1,"message":"142","line":9,"column":9,"nodeType":"117","messageId":"118","endLine":9,"endColumn":14},{"ruleId":"115","severity":1,"message":"143","line":10,"column":10,"nodeType":"117","messageId":"118","endLine":10,"endColumn":14},{"ruleId":"115","severity":1,"message":"144","line":10,"column":16,"nodeType":"117","messageId":"118","endLine":10,"endColumn":24},{"ruleId":"120","replacedBy":"145"},{"ruleId":"122","replacedBy":"146"},{"ruleId":"115","severity":1,"message":"142","line":3,"column":9,"nodeType":"117","messageId":"118","endLine":3,"endColumn":14},{"ruleId":"115","severity":1,"message":"142","line":1,"column":9,"nodeType":"117","messageId":"118","endLine":1,"endColumn":14},{"ruleId":"115","severity":1,"message":"147","line":3,"column":22,"nodeType":"117","messageId":"118","endLine":3,"endColumn":32},{"ruleId":"115","severity":1,"message":"148","line":13,"column":12,"nodeType":"117","messageId":"118","endLine":13,"endColumn":16},{"ruleId":"120","replacedBy":"149"},{"ruleId":"122","replacedBy":"150"},{"ruleId":"115","severity":1,"message":"151","line":1,"column":16,"nodeType":"117","messageId":"118","endLine":1,"endColumn":26},{"ruleId":"115","severity":1,"message":"152","line":5,"column":46,"nodeType":"117","messageId":"118","endLine":5,"endColumn":54},{"ruleId":"115","severity":1,"message":"153","line":7,"column":9,"nodeType":"117","messageId":"118","endLine":7,"endColumn":20},{"ruleId":"115","severity":1,"message":"154","line":12,"column":26,"nodeType":"117","messageId":"118","endLine":12,"endColumn":43},{"ruleId":"115","severity":1,"message":"155","line":13,"column":10,"nodeType":"117","messageId":"118","endLine":13,"endColumn":17},{"ruleId":"115","severity":1,"message":"156","line":36,"column":7,"nodeType":"117","messageId":"118","endLine":36,"endColumn":13},{"ruleId":"115","severity":1,"message":"157","line":63,"column":16,"nodeType":"117","messageId":"118","endLine":63,"endColumn":22},{"ruleId":"115","severity":1,"message":"158","line":63,"column":34,"nodeType":"117","messageId":"118","endLine":63,"endColumn":41},{"ruleId":"159","severity":1,"message":"160","line":75,"column":21,"nodeType":"117","messageId":"161","endLine":75,"endColumn":23},{"ruleId":"136","severity":1,"message":"162","line":166,"column":8,"nodeType":"138","endLine":166,"endColumn":14,"suggestions":"163"},{"ruleId":"115","severity":1,"message":"164","line":5,"column":17,"nodeType":"117","messageId":"118","endLine":5,"endColumn":20},{"ruleId":"115","severity":1,"message":"165","line":17,"column":10,"nodeType":"117","messageId":"118","endLine":17,"endColumn":20},{"ruleId":"115","severity":1,"message":"166","line":39,"column":7,"nodeType":"117","messageId":"118","endLine":39,"endColumn":14},{"ruleId":"115","severity":1,"message":"167","line":76,"column":7,"nodeType":"117","messageId":"118","endLine":76,"endColumn":13},{"ruleId":"168","severity":1,"message":"169","line":117,"column":13,"nodeType":"170","endLine":117,"endColumn":157},{"ruleId":"171","severity":1,"message":"172","line":235,"column":21,"nodeType":"173","messageId":"174","endLine":235,"endColumn":23},{"ruleId":"171","severity":1,"message":"172","line":243,"column":20,"nodeType":"173","messageId":"174","endLine":243,"endColumn":22},{"ruleId":"171","severity":1,"message":"172","line":246,"column":20,"nodeType":"173","messageId":"174","endLine":246,"endColumn":22},{"ruleId":"136","severity":1,"message":"175","line":254,"column":8,"nodeType":"138","endLine":254,"endColumn":15,"suggestions":"176"},{"ruleId":"136","severity":1,"message":"177","line":279,"column":8,"nodeType":"138","endLine":279,"endColumn":22,"suggestions":"178"},{"ruleId":"115","severity":1,"message":"154","line":5,"column":16,"nodeType":"117","messageId":"118","endLine":5,"endColumn":33},{"ruleId":"115","severity":1,"message":"179","line":7,"column":10,"nodeType":"117","messageId":"118","endLine":7,"endColumn":23},{"ruleId":"115","severity":1,"message":"180","line":102,"column":10,"nodeType":"117","messageId":"118","endLine":102,"endColumn":20},{"ruleId":"136","severity":1,"message":"181","line":190,"column":7,"nodeType":"138","endLine":190,"endColumn":20,"suggestions":"182"},{"ruleId":"120","replacedBy":"183"},{"ruleId":"122","replacedBy":"184"},"@typescript-eslint/no-unused-vars","'Login' is defined but never used.","Identifier","unusedVar","'useRecoilState' is defined but never used.","no-native-reassign",["185"],"no-negated-in-lhs",["186"],"'react' is defined but never used.",["185"],["186"],"no-useless-rename","Destructuring assignment board unnecessarily renamed.","Property","unnecessarilyRenamed",{"range":"187","text":"188"},"Destructuring assignment poss unnecessarily renamed.",{"range":"189","text":"190"},"Destructuring assignment main_robot unnecessarily renamed.",{"range":"191","text":"192"},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'downHandler' and 'upHandler'. Either include them or remove the dependency array.","ArrayExpression",["193"],"'useEffect' is defined but never used.","'useState' is defined but never used.","'Color' is defined but never used.","'cast' is defined but never used.","'Castable' is defined but never used.",["185"],["186"],"'fetchMeAPI' is defined but never used.","'user' is assigned a value but never used.",["185"],["186"],"'BoardModel' is defined but never used.","'simulate' is defined but never used.","'ClientEvent' is defined but never used.","'useSetRecoilState' is defined but never used.","'fetchMe' is defined but never used.","'Screen' is assigned a value but never used.","'robots' is assigned a value but never used.","'reached' is assigned a value but never used.","@typescript-eslint/no-redeclare","'np' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'procServerEvent'. Either include it or remove the dependency array.",["194"],"'css' is defined but never used.","'parseHands' is defined but never used.","'DirText' is assigned a value but never used.","'ResBox' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'clearHands', 'onSubmit', and 'rmHand'. Either include them or remove the dependency array.",["195"],"React Hook useEffect has a missing dependency: 'pressArrow'. Either include it or remove the dependency array.",["196"],"'CSSTransition' is defined but never used.","'getRankStr' is defined but never used.","React Hook useEffect has an unnecessary dependency: 'ref.current'. Either exclude it or remove the dependency array. Mutable values like 'ref.current' aren't valid dependencies because mutating them doesn't re-render the component.",["197"],["185"],["186"],"no-global-assign","no-unsafe-negation",[2477,2488],"board",[2490,2499],"poss",[2501,2522],"main_robot",{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},{"desc":"202","fix":"203"},{"desc":"204","fix":"205"},{"desc":"206","fix":"207"},"Update the dependencies array to be: [downHandler, upHandler]",{"range":"208","text":"209"},"Update the dependencies array to be: [procServerEvent, user]",{"range":"210","text":"211"},"Update the dependencies array to be: [clearHands, hands, onSubmit, rmHand]",{"range":"212","text":"213"},"Update the dependencies array to be: [arrowPressed, pressArrow]",{"range":"214","text":"215"},"Update the dependencies array to be: []",{"range":"216","text":"217"},[4161,4163],"[downHandler, upHandler]",[5839,5845],"[procServerEvent, user]",[6965,6972],"[clearHands, hands, onSubmit, rmHand]",[7769,7783],"[arrowPressed, pressArrow]",[4941,4954],"[]"]